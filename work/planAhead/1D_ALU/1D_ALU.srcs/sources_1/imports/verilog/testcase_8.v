/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testcase_8 (
    input clk,
    input rst,
    input button_alu,
    output reg [7:0] check_input_alu,
    output reg [15:0] display,
    output reg [15:0] alu_result
  );
  
  
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z_;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_1 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .alu(M_alu_alu),
    .z_(M_alu_z_),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  localparam START_state = 5'd0;
  localparam ADDPOS_state = 5'd1;
  localparam ADDNEG_state = 5'd2;
  localparam OVERFLOW_state = 5'd3;
  localparam SUBPOS_state = 5'd4;
  localparam SUBNEG_state = 5'd5;
  localparam UNDERFLOW_state = 5'd6;
  localparam MULT_state = 5'd7;
  localparam DIV_state = 5'd8;
  localparam CMPLEV_state = 5'd9;
  localparam CMPLTV_state = 5'd10;
  localparam CMPEQ_state = 5'd11;
  localparam XOR_state = 5'd12;
  localparam AND_state = 5'd13;
  localparam OR_state = 5'd14;
  localparam SHL_state = 5'd15;
  localparam SHR_state = 5'd16;
  localparam SRA_state = 5'd17;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  reg [5:0] M_alufn_df_d, M_alufn_df_q = 1'h0;
  reg [15:0] M_input_a_df_d, M_input_a_df_q = 1'h0;
  reg [15:0] M_input_b_df_d, M_input_b_df_q = 1'h0;
  reg [15:0] M_display_v_d, M_display_v_q = 1'h0;
  reg [15:0] M_alu_out_d, M_alu_out_q = 1'h0;
  reg M_button_d, M_button_q = 1'h0;
  reg [7:0] M_check_input_d, M_check_input_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_button_d = M_button_q;
    M_input_b_df_d = M_input_b_df_q;
    M_display_v_d = M_display_v_q;
    M_alu_out_d = M_alu_out_q;
    M_input_a_df_d = M_input_a_df_q;
    M_check_input_d = M_check_input_q;
    M_alufn_df_d = M_alufn_df_q;
    
    M_check_input_d = 1'h0;
    M_alu_alufn = M_alufn_df_q;
    M_alu_a = M_input_a_df_q;
    M_alu_b = M_input_b_df_q;
    M_alu_out_d = 1'h0;
    M_display_v_d = 16'h0000;
    M_button_d = button_alu;
    
    case (M_state_q)
      START_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 1'h0;
        M_input_a_df_d = 1'h0;
        M_input_b_df_d = 1'h0;
        M_display_v_d = 16'h0aaf;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_button_q) begin
          M_state_d = ADDPOS_state;
        end
      end
      ADDPOS_state: begin
        M_alufn_df_d = 6'h00;
        M_button_d = button_alu;
        M_input_a_df_d = 16'h0016;
        M_input_b_df_d = 16'h0023;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0039) begin
          M_display_v_d = 16'h1aaf;
        end else begin
          M_display_v_d = 16'h1aa3;
        end
        if (M_button_q) begin
          M_state_d = ADDNEG_state;
        end
      end
      ADDNEG_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h00;
        M_input_a_df_d = 16'hffde;
        M_input_b_df_d = 16'hffeb;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'hffc9) begin
          M_display_v_d = 16'h2aaf;
        end else begin
          M_display_v_d = 16'h2aa3;
        end
        if (M_button_q) begin
          M_state_d = OVERFLOW_state;
        end
      end
      OVERFLOW_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h00;
        M_input_a_df_d = $signed(16'h7fff);
        M_input_b_df_d = $signed(16'h0001);
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h8000) begin
          M_display_v_d = 16'h3aaf;
        end else begin
          M_display_v_d = 16'h3aa3;
        end
        if (M_button_q) begin
          M_state_d = SUBPOS_state;
        end
      end
      SUBPOS_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h01;
        M_input_a_df_d = 16'h0078;
        M_input_b_df_d = 16'h0050;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0028) begin
          M_display_v_d = 16'h4aaf;
        end else begin
          M_display_v_d = 16'h4aa3;
        end
        if (M_button_q) begin
          M_state_d = SUBNEG_state;
        end
      end
      SUBNEG_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h01;
        M_input_a_df_d = 16'hffe0;
        M_input_b_df_d = 16'hffe9;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'hfff7) begin
          M_display_v_d = 16'h5aaf;
        end else begin
          M_display_v_d = 16'h5aa3;
        end
        if (M_button_q) begin
          M_state_d = UNDERFLOW_state;
        end
      end
      UNDERFLOW_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h01;
        M_input_a_df_d = 16'h8000;
        M_input_b_df_d = 16'h0001;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h7fff) begin
          M_display_v_d = 16'h6aaf;
        end else begin
          M_display_v_d = 16'h6aa3;
        end
        if (M_button_q) begin
          M_state_d = MULT_state;
        end
      end
      MULT_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h02;
        M_input_a_df_d = 16'h0020;
        M_input_b_df_d = 16'h0002;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0040) begin
          M_display_v_d = 16'h7aaf;
        end else begin
          M_display_v_d = 16'h7aaf;
        end
        if (M_button_q) begin
          M_state_d = DIV_state;
        end
      end
      DIV_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h03;
        M_input_a_df_d = 16'h0020;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0004) begin
          M_display_v_d = 16'h8aaf;
        end else begin
          M_display_v_d = 16'h8aa3;
        end
        if (M_button_q) begin
          M_state_d = CMPLEV_state;
        end
      end
      CMPLEV_state: begin
        M_button_d = button_alu;
        M_alufn_df_d = 6'h37;
        M_input_a_df_d = 16'h0008;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0001) begin
          M_display_v_d = 16'h9aaf;
        end else begin
          M_display_v_d = 16'h9aa3;
        end
        if (M_button_q) begin
          M_state_d = CMPLTV_state;
        end
      end
      CMPLTV_state: begin
        M_alufn_df_d = 6'h35;
        M_input_a_df_d = 16'h0002;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0001) begin
          M_display_v_d = 16'h10af;
        end else begin
          M_display_v_d = 16'h10a3;
        end
        if (M_button_q) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alufn_df_d = 6'h33;
        M_input_a_df_d = 16'h0007;
        M_input_b_df_d = 16'h0007;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0001) begin
          M_display_v_d = 16'h11af;
        end else begin
          M_display_v_d = 16'h11a3;
        end
        if (M_button_q) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alufn_df_d = 6'h16;
        M_input_a_df_d = 16'h0006;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h000e) begin
          M_display_v_d = 16'h12af;
        end else begin
          M_display_v_d = 16'h12a3;
        end
        if (M_button_q) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alufn_df_d = 6'h18;
        M_input_a_df_d = 16'h0006;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0000) begin
          M_display_v_d = 16'h13af;
        end else begin
          M_display_v_d = 16'h13a3;
        end
        if (M_button_q) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alufn_df_d = 6'h1e;
        M_input_a_df_d = 16'h0006;
        M_input_b_df_d = 16'h0008;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h000e) begin
          M_display_v_d = 16'h14af;
        end else begin
          M_display_v_d = 16'h14a3;
        end
        if (M_button_q) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alufn_df_d = 6'h20;
        M_input_a_df_d = 16'h000f;
        M_input_b_df_d = 16'h0002;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h003c) begin
          M_display_v_d = 16'h15af;
        end else begin
          M_display_v_d = 16'h15a3;
        end
        if (M_button_q) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alufn_df_d = 6'h21;
        M_input_a_df_d = 16'h0040;
        M_input_b_df_d = 16'h0003;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'h0008) begin
          M_display_v_d = 16'h16af;
        end else begin
          M_display_v_d = 16'h16a3;
        end
        if (M_button_q) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alufn_df_d = 6'h23;
        M_input_a_df_d = 16'hfff8;
        M_input_b_df_d = 16'h0004;
        M_alu_out_d = M_alu_alu;
        M_check_input_d[2+0-:1] = M_alu_n;
        M_check_input_d[1+0-:1] = M_alu_v;
        M_check_input_d[0+0-:1] = M_alu_z_;
        if (M_alu_alu == 16'hffff) begin
          M_display_v_d = 16'h17af;
        end else begin
          M_display_v_d = 16'h17a3;
        end
        if (M_button_q) begin
          M_state_d = START_state;
        end
      end
    endcase
    display = M_display_v_q;
    alu_result = M_alu_out_q;
    check_input_alu[2+0-:1] = M_check_input_q[2+0-:1];
    check_input_alu[1+0-:1] = M_check_input_q[1+0-:1];
    check_input_alu[0+0-:1] = M_check_input_q[0+0-:1];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
    
    M_alufn_df_q <= M_alufn_df_d;
    M_input_a_df_q <= M_input_a_df_d;
    M_input_b_df_q <= M_input_b_df_d;
    M_display_v_q <= M_display_v_d;
    M_alu_out_q <= M_alu_out_d;
    M_button_q <= M_button_d;
    M_check_input_q <= M_check_input_d;
  end
  
endmodule
