module alu (

  // Inputs from mojo_top.
  input alufn[6],
  input a[16],  
  input b[16],  
    
  // Outputs to mojo_top.
  output alu[16],
  output zvn[3]
    
) {  
  
  // Modules of ALU.
  adder add_call;
  cmp cmp_call;
  boole bool_call;
  shift shift_call;
  
  always {
    
    // Adder module.
    add_call.a = a;
    add_call.b = b; 
    add_call.alufn = alufn[3:0]; 
    
    // Comparator module.
    cmp_call.alufn = alufn[3:0];
    cmp_call.z = add_call.zvn[2];
    cmp_call.v = add_call.zvn[1];
    cmp_call.n = add_call.zvn[0];
    
    // Boolean module.
    bool_call.a = a;
    bool_call.b = b;
    bool_call.alufn=alufn[3:0];
    
    // Assigning inputs of ALU to shifter module.
    shift_call.a = a;
    shift_call.shift_bit = b[5:0];
    shift_call.alufn=alufn[3:0];
    
    // 2 most significant bit of alufn --> To select the component to use.
    case(alufn[5:4]){
      b00:       
        alu = add_call.sum_out;
      b01:
        alu = bool_call.boole_out; // Calling the boolean component.
      b10:
        alu = shift_call.shift_out; // Using the shifter component.
      b11:
        alu = cmp_call.cmp_out; // Using the compare component.
        
      default:
        alu = 0;    
    }
    
    zvn = add_call.zvn;
    
  }  
}